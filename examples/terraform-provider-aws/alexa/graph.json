{
    "edges": [
        {
            "edge_type": 1,
            "source": "[root] aws_iam_role.default",
            "svg_id": "edge_0",
            "target": "[root] provider.aws"
        },
        {
            "edge_type": 1,
            "source": "[root] aws_iam_role_policy.default",
            "svg_id": "edge_1",
            "target": "[root] aws_iam_role.default"
        },
        {
            "edge_type": 1,
            "source": "[root] aws_lambda_function.default",
            "svg_id": "edge_2",
            "target": "[root] aws_iam_role.default"
        },
        {
            "edge_type": 1,
            "source": "[root] aws_lambda_permission.default",
            "svg_id": "edge_3",
            "target": "[root] aws_lambda_function.default"
        },
        {
            "edge_type": 1,
            "source": "[root] meta.count-boundary (count boundary fixup)",
            "svg_id": "edge_4",
            "target": "[root] aws_iam_role_policy.default"
        },
        {
            "edge_type": 1,
            "source": "[root] meta.count-boundary (count boundary fixup)",
            "svg_id": "edge_5",
            "target": "[root] aws_lambda_permission.default"
        },
        {
            "edge_type": 1,
            "source": "[root] meta.count-boundary (count boundary fixup)",
            "svg_id": "edge_6",
            "target": "[root] output.aws_lambda_function_arn"
        },
        {
            "edge_type": 1,
            "source": "[root] output.aws_lambda_function_arn",
            "svg_id": "edge_7",
            "target": "[root] aws_lambda_function.default"
        },
        {
            "edge_type": 1,
            "source": "[root] provider.aws (close)",
            "svg_id": "edge_8",
            "target": "[root] aws_iam_role_policy.default"
        },
        {
            "edge_type": 1,
            "source": "[root] provider.aws (close)",
            "svg_id": "edge_9",
            "target": "[root] aws_lambda_permission.default"
        },
        {
            "edge_type": 1,
            "source": "[root] provider.aws",
            "svg_id": "edge_10",
            "target": "[root] var.aws_region"
        },
        {
            "edge_type": 1,
            "source": "[root] root",
            "svg_id": "edge_11",
            "target": "[root] meta.count-boundary (count boundary fixup)"
        },
        {
            "edge_type": 1,
            "source": "[root] root",
            "svg_id": "edge_12",
            "target": "[root] provider.aws (close)"
        }
    ],
    "nodes": [
        {
            "cluster": "root",
            "definition": {
                "assume_role_policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"lambda.amazonaws.com\"\n      },\n      \"Effect\": \"Allow\",\n      \"Sid\": \"\"\n    }\n  ]\n}",
                "name": "terraform_lambda_alexa_example"
            },
            "group": 20000,
            "label": "[root] aws_iam_role.default",
            "resource_name": "default",
            "simple_name": "aws_iam_role.default",
            "svg_id": "node_0",
            "type": "aws_iam_role"
        },
        {
            "cluster": "root",
            "definition": {
                "name": "terraform_lambda_alexa_example",
                "policy": "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"logs:CreateLogGroup\",\n                \"logs:CreateLogStream\",\n                \"logs:PutLogEvents\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}",
                "role": "${aws_iam_role.default.id}"
            },
            "group": 20000,
            "label": "[root] aws_iam_role_policy.default",
            "resource_name": "default",
            "simple_name": "aws_iam_role_policy.default",
            "svg_id": "node_1",
            "type": "aws_iam_role_policy"
        },
        {
            "cluster": "root",
            "definition": {
                "filename": "lambda_function.zip",
                "function_name": "terraform_lambda_alexa_example",
                "handler": "lambda_function.lambda_handler",
                "role": "${aws_iam_role.default.arn}",
                "runtime": "python2.7",
                "source_code_hash": "${base64sha256(file(\"lambda_function.zip\"))}"
            },
            "group": 20000,
            "label": "[root] aws_lambda_function.default",
            "resource_name": "default",
            "simple_name": "aws_lambda_function.default",
            "svg_id": "node_2",
            "type": "aws_lambda_function"
        },
        {
            "cluster": "root",
            "definition": {
                "action": "lambda:InvokeFunction",
                "function_name": "${aws_lambda_function.default.function_name}",
                "principal": "alexa-appkit.amazon.com",
                "statement_id": "AllowExecutionFromAlexa"
            },
            "group": 20000,
            "label": "[root] aws_lambda_permission.default",
            "resource_name": "default",
            "simple_name": "aws_lambda_permission.default",
            "svg_id": "node_3",
            "type": "aws_lambda_permission"
        },
        {
            "cluster": "root",
            "definition": {
                "region": "${var.aws_region}"
            },
            "group": 20000,
            "label": "[root] provider.aws",
            "resource_name": "aws",
            "simple_name": "provider.aws",
            "svg_id": "node_4",
            "type": "provider"
        },
        {
            "cluster": "root",
            "definition": "",
            "group": 20000,
            "label": "[root] meta.count-boundary (count boundary fixup)",
            "resource_name": "count-boundary",
            "simple_name": "meta.count-boundary (count boundary fixup)",
            "svg_id": "node_5",
            "type": "meta"
        },
        {
            "cluster": "cluster[root] meta.count-boundary (count boundary fixup)_output_[root] aws_lambda_function.default",
            "definition": {
                "value": "${aws_lambda_function.default.arn}"
            },
            "group": 20000,
            "label": "[root] output.aws_lambda_function_arn",
            "resource_name": "aws_lambda_function_arn",
            "simple_name": "output.aws_lambda_function_arn",
            "svg_id": "node_6",
            "type": "output"
        },
        {
            "cluster": "root",
            "definition": {
                "region": "${var.aws_region}"
            },
            "group": 20000,
            "label": "[root] provider.aws (close)",
            "resource_name": "aws",
            "simple_name": "provider.aws (close)",
            "svg_id": "node_7",
            "type": "provider"
        },
        {
            "cluster": "cluster[root] provider.aws_var_",
            "definition": {
                "default": "us-east-1",
                "description": "The AWS region to create things in."
            },
            "group": 20000,
            "label": "[root] var.aws_region",
            "resource_name": "aws_region",
            "simple_name": "var.aws_region",
            "svg_id": "node_8",
            "type": "var"
        },
        {
            "cluster": "root",
            "definition": "",
            "group": 20000,
            "label": "[root] root",
            "resource_name": "",
            "simple_name": "root",
            "svg_id": "node_9",
            "type": ""
        }
    ]
}
